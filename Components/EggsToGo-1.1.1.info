{"Name":"Eggs-To-Go","Id":1291,"Alias":"EggsToGo","Description":"Eggs-To-Go\n==========\n\nEggs-To-Go is a Xamarin Cross Platform mobile library for implementing Easter Egg gestures!\n\nFeatures\n--------\n - Konami and Mortal Kombat code\n - Create your own Custom sequences\n - Xamarin.iOS and Xamarin.Android support\n - Xamarin Component store\n \n\nQuick and Simple\n----------------\n```csharp\n//Create our new instance, specifying the UIView to recognize gestures on\nvar easter = new EggsToGo.Easter (this.View, new KonamiCode());\n\n//Event for when a egg/code has been detected (eg: Konami Code)\neaster.EggDetected += egg =\u003e Console.WriteLine(\"Egg: \" + egg.Name);\n\n//You can see each individual command as it happens too\neaster.CommandDetected += cmd =\u003e Console.WriteLine(\"Command: \" + cmd.Value);\n```\n\n\nDefault Egg Sequences\n---------------------\nBy default I\u0027ve included the Konami code and Mortal Kombat code:\n\n- **Konami Code:** UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, TAP, TAP\n- **Mortal Kombat Code:** DOWN, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, TAP, TAP\n\n\nCustom Egg Sequences\n--------------------\nBy default the Konami and Mortal Kombat codes are built in, but you may want to add your own sequences!\n\n```csharp\nvar easyEgg = new CustomEgg(\"Easy\")\n    .WatchForSequence(Command.SwipeUp(), Command.SwipeDown(), Command.Tap());\n    \nvar easter = new Easter(this.View, easyEgg);\n```\n\n\nThanks\n------\nThanks to Eight-Bot software for their original post on getting this working with Mono for Android: http://eightbot.com/writeline/developer/konami-code-detection-with-mono-for-android/\n\nThis was definitely my inspiration for making this simple component!\n\n","Version":"1.1.1","Summary":"Cross platform mobile library for implementing Easter Egg gestures","QuickStart":"Getting Started - Xamarin.iOS\n-----------------------------\nYou can use the following code with any UIView you would like to recognize eggs/codes on (for example in a View Controller).  It will attach gesture listeners to the view you specify in the actor:\n\n```csharp\n//Create our new instance, specifying the UIView to recognize gestures on\nvar easter = new EggsToGo.Easter (this.View, new KonamiCode());\n\n//Event for when a egg/code has been detected (eg: Konami Code)\neaster.EggDetected += egg =\u003e Console.WriteLine(\"Egg: \" + egg.Name);\n\n//You can see each individual command as it happens too\neaster.CommandDetected += cmd =\u003e Console.WriteLine(\"Command: \" + cmd.Value);\n```\n\n\n \nGetting Started - Xamarin.Android\n---------------------------------\nAndroid is a bit trickier than iOS, simply because recognizing gestures requires a MotionEvent of some sort.  Typically you would override the OnTouchEvent in an activity and pass that along to the Easter instance.  The Easter instance doesn\u0027t care where this information comes from, but it needs it in order to recognize gestures.\n\nYou can use the following code in the Activity you would like to support the gesture detection:\n\n```csharp\npublic class MainActivity : Activity\n{\n\tEggsToGo.Easter easter;\n\t\n    protected override OnCreate(Bundle bundle)\n    {\n        base.OnCreate (bundle);\n        \n        SetContentView(Resource.Layout.Main);\n        \n        easter = new EggsToGo.Easter (new KonamiCode());\n        \n        //Event for when a egg/code has been detected (eg: Konami Code)\n        easter.EggDetected += egg =\u003e\n            Toast.MakeText(this, egg.Name, ToastLength.Short).Show();\n            \n        //You can see each individual command as it happens too\n        easter.CommandDetected += cmd =\u003e\n            Android.Util.Log.Debug(\"EggsToGo\", \"Commadn: \" + cmd.Value);\n    }\n    \n    public override bool OnTouchEvent(MotionEvent e)\n    {\n    \t//IMPORTANT: You must pass this event on to the Easter class\n        easter.OnTouchEvent(e);\n        \n        return base.OnTouchEvent(e);\n    }\n}\n```\n\n\nDefault Egg Sequences\n---------------------\nBy default I\u0027ve included the Konami code and Mortal Kombat code:\n\n- **Konami Code:** UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, TAP, TAP\n- **Mortal Kombat Code:** DOWN, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, TAP, TAP\n\n\nCustom Egg Sequences\n--------------------\nBy default the Konami and Mortal Kombat codes are built in, but you may want to add your own sequences!\n\n```csharp\nvar easyEgg = new CustomEgg(\"Easy\")\n    .WatchForSequence(Command.SwipeUp(), Command.SwipeDown(), Command.Tap());\n    \nvar easter = new Easter(this.View, easyEgg);\n```\n","Hash":"66b6645eba31454bc93a21ba2b299b57","TargetPlatforms":["ios","android"],"TrialHash":null}